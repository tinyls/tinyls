/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * URL Shortener API
 * RESTful API for URL shortening service. Provides endpoints for URL shortening, redirection, user management, and analytics.
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query"
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query"

import type { UrlDTO } from "../../schemas"

import { customInstance } from ".././mutator/customAxiosInstance"
import type { ErrorType, BodyType } from ".././mutator/customAxiosInstance"

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

export const getUrlById = (
	id: number,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<UrlDTO>(
		{ url: `/api/urls/id/${id}`, method: "GET", signal },
		options,
	)
}

export const getGetUrlByIdQueryKey = (id: number) => {
	return [`/api/urls/id/${id}`] as const
}

export const getGetUrlByIdQueryOptions = <
	TData = Awaited<ReturnType<typeof getUrlById>>,
	TError = ErrorType<unknown>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getUrlById>>, TError, TData>
		>
		request?: SecondParameter<typeof customInstance>
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {}

	const queryKey = queryOptions?.queryKey ?? getGetUrlByIdQueryKey(id)

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getUrlById>>> = ({
		signal,
	}) => getUrlById(id, requestOptions, signal)

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getUrlById>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUrlByIdQueryResult = NonNullable<
	Awaited<ReturnType<typeof getUrlById>>
>
export type GetUrlByIdQueryError = ErrorType<unknown>

export function useGetUrlById<
	TData = Awaited<ReturnType<typeof getUrlById>>,
	TError = ErrorType<unknown>,
>(
	id: number,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getUrlById>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getUrlById>>,
					TError,
					Awaited<ReturnType<typeof getUrlById>>
				>,
				"initialData"
			>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetUrlById<
	TData = Awaited<ReturnType<typeof getUrlById>>,
	TError = ErrorType<unknown>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getUrlById>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getUrlById>>,
					TError,
					Awaited<ReturnType<typeof getUrlById>>
				>,
				"initialData"
			>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetUrlById<
	TData = Awaited<ReturnType<typeof getUrlById>>,
	TError = ErrorType<unknown>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getUrlById>>, TError, TData>
		>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>
}

export function useGetUrlById<
	TData = Awaited<ReturnType<typeof getUrlById>>,
	TError = ErrorType<unknown>,
>(
	id: number,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getUrlById>>, TError, TData>
		>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>
} {
	const queryOptions = getGetUrlByIdQueryOptions(id, options)

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> }

	query.queryKey = queryOptions.queryKey

	return query
}

export const updateUrlById = (
	id: number,
	urlDTO: BodyType<UrlDTO>,
	options?: SecondParameter<typeof customInstance>,
) => {
	return customInstance<UrlDTO>(
		{
			url: `/api/urls/id/${id}`,
			method: "PUT",
			headers: { "Content-Type": "application/json" },
			data: urlDTO,
		},
		options,
	)
}

export const getUpdateUrlByIdMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateUrlById>>,
		TError,
		{ id: number; data: BodyType<UrlDTO> },
		TContext
	>
	request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
	Awaited<ReturnType<typeof updateUrlById>>,
	TError,
	{ id: number; data: BodyType<UrlDTO> },
	TContext
> => {
	const mutationKey = ["updateUrlById"]
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined }

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof updateUrlById>>,
		{ id: number; data: BodyType<UrlDTO> }
	> = (props) => {
		const { id, data } = props ?? {}

		return updateUrlById(id, data, requestOptions)
	}

	return { mutationFn, ...mutationOptions }
}

export type UpdateUrlByIdMutationResult = NonNullable<
	Awaited<ReturnType<typeof updateUrlById>>
>
export type UpdateUrlByIdMutationBody = BodyType<UrlDTO>
export type UpdateUrlByIdMutationError = ErrorType<unknown>

export const useUpdateUrlById = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof updateUrlById>>,
			TError,
			{ id: number; data: BodyType<UrlDTO> },
			TContext
		>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof updateUrlById>>,
	TError,
	{ id: number; data: BodyType<UrlDTO> },
	TContext
> => {
	const mutationOptions = getUpdateUrlByIdMutationOptions(options)

	return useMutation(mutationOptions, queryClient)
}
export const deleteUrlById = (
	id: number,
	options?: SecondParameter<typeof customInstance>,
) => {
	return customInstance<void>(
		{ url: `/api/urls/id/${id}`, method: "DELETE" },
		options,
	)
}

export const getDeleteUrlByIdMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteUrlById>>,
		TError,
		{ id: number },
		TContext
	>
	request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteUrlById>>,
	TError,
	{ id: number },
	TContext
> => {
	const mutationKey = ["deleteUrlById"]
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined }

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteUrlById>>,
		{ id: number }
	> = (props) => {
		const { id } = props ?? {}

		return deleteUrlById(id, requestOptions)
	}

	return { mutationFn, ...mutationOptions }
}

export type DeleteUrlByIdMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteUrlById>>
>

export type DeleteUrlByIdMutationError = ErrorType<unknown>

export const useDeleteUrlById = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof deleteUrlById>>,
			TError,
			{ id: number },
			TContext
		>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof deleteUrlById>>,
	TError,
	{ id: number },
	TContext
> => {
	const mutationOptions = getDeleteUrlByIdMutationOptions(options)

	return useMutation(mutationOptions, queryClient)
}
export const incrementClicks = (
	shortCode: string,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<UrlDTO>(
		{ url: `/api/urls/${shortCode}/click`, method: "POST", signal },
		options,
	)
}

export const getIncrementClicksMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof incrementClicks>>,
		TError,
		{ shortCode: string },
		TContext
	>
	request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
	Awaited<ReturnType<typeof incrementClicks>>,
	TError,
	{ shortCode: string },
	TContext
> => {
	const mutationKey = ["incrementClicks"]
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined }

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof incrementClicks>>,
		{ shortCode: string }
	> = (props) => {
		const { shortCode } = props ?? {}

		return incrementClicks(shortCode, requestOptions)
	}

	return { mutationFn, ...mutationOptions }
}

export type IncrementClicksMutationResult = NonNullable<
	Awaited<ReturnType<typeof incrementClicks>>
>

export type IncrementClicksMutationError = ErrorType<unknown>

export const useIncrementClicks = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof incrementClicks>>,
			TError,
			{ shortCode: string },
			TContext
		>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof incrementClicks>>,
	TError,
	{ shortCode: string },
	TContext
> => {
	const mutationOptions = getIncrementClicksMutationOptions(options)

	return useMutation(mutationOptions, queryClient)
}
export const getUrlsByUser = (
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<UrlDTO[]>(
		{ url: `/api/urls/`, method: "GET", signal },
		options,
	)
}

export const getGetUrlsByUserQueryKey = () => {
	return [`/api/urls/`] as const
}

export const getGetUrlsByUserQueryOptions = <
	TData = Awaited<ReturnType<typeof getUrlsByUser>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getUrlsByUser>>, TError, TData>
	>
	request?: SecondParameter<typeof customInstance>
}) => {
	const { query: queryOptions, request: requestOptions } = options ?? {}

	const queryKey = queryOptions?.queryKey ?? getGetUrlsByUserQueryKey()

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getUrlsByUser>>> = ({
		signal,
	}) => getUrlsByUser(requestOptions, signal)

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getUrlsByUser>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUrlsByUserQueryResult = NonNullable<
	Awaited<ReturnType<typeof getUrlsByUser>>
>
export type GetUrlsByUserQueryError = ErrorType<unknown>

export function useGetUrlsByUser<
	TData = Awaited<ReturnType<typeof getUrlsByUser>>,
	TError = ErrorType<unknown>,
>(
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getUrlsByUser>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getUrlsByUser>>,
					TError,
					Awaited<ReturnType<typeof getUrlsByUser>>
				>,
				"initialData"
			>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetUrlsByUser<
	TData = Awaited<ReturnType<typeof getUrlsByUser>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getUrlsByUser>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getUrlsByUser>>,
					TError,
					Awaited<ReturnType<typeof getUrlsByUser>>
				>,
				"initialData"
			>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetUrlsByUser<
	TData = Awaited<ReturnType<typeof getUrlsByUser>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getUrlsByUser>>, TError, TData>
		>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>
}

export function useGetUrlsByUser<
	TData = Awaited<ReturnType<typeof getUrlsByUser>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getUrlsByUser>>, TError, TData>
		>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>
} {
	const queryOptions = getGetUrlsByUserQueryOptions(options)

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> }

	query.queryKey = queryOptions.queryKey

	return query
}

export const createUrl = (
	urlDTO: BodyType<UrlDTO>,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<UrlDTO>(
		{
			url: `/api/urls/`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: urlDTO,
			signal,
		},
		options,
	)
}

export const getCreateUrlMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createUrl>>,
		TError,
		{ data: BodyType<UrlDTO> },
		TContext
	>
	request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
	Awaited<ReturnType<typeof createUrl>>,
	TError,
	{ data: BodyType<UrlDTO> },
	TContext
> => {
	const mutationKey = ["createUrl"]
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined }

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createUrl>>,
		{ data: BodyType<UrlDTO> }
	> = (props) => {
		const { data } = props ?? {}

		return createUrl(data, requestOptions)
	}

	return { mutationFn, ...mutationOptions }
}

export type CreateUrlMutationResult = NonNullable<
	Awaited<ReturnType<typeof createUrl>>
>
export type CreateUrlMutationBody = BodyType<UrlDTO>
export type CreateUrlMutationError = ErrorType<unknown>

export const useCreateUrl = <TError = ErrorType<unknown>, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof createUrl>>,
			TError,
			{ data: BodyType<UrlDTO> },
			TContext
		>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof createUrl>>,
	TError,
	{ data: BodyType<UrlDTO> },
	TContext
> => {
	const mutationOptions = getCreateUrlMutationOptions(options)

	return useMutation(mutationOptions, queryClient)
}
export const getUrlByShortCode = (
	shortCode: string,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<UrlDTO>(
		{ url: `/api/urls/${shortCode}`, method: "GET", signal },
		options,
	)
}

export const getGetUrlByShortCodeQueryKey = (shortCode: string) => {
	return [`/api/urls/${shortCode}`] as const
}

export const getGetUrlByShortCodeQueryOptions = <
	TData = Awaited<ReturnType<typeof getUrlByShortCode>>,
	TError = ErrorType<unknown>,
>(
	shortCode: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getUrlByShortCode>>,
				TError,
				TData
			>
		>
		request?: SecondParameter<typeof customInstance>
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {}

	const queryKey =
		queryOptions?.queryKey ?? getGetUrlByShortCodeQueryKey(shortCode)

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getUrlByShortCode>>
	> = ({ signal }) => getUrlByShortCode(shortCode, requestOptions, signal)

	return {
		queryKey,
		queryFn,
		enabled: !!shortCode,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getUrlByShortCode>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUrlByShortCodeQueryResult = NonNullable<
	Awaited<ReturnType<typeof getUrlByShortCode>>
>
export type GetUrlByShortCodeQueryError = ErrorType<unknown>

export function useGetUrlByShortCode<
	TData = Awaited<ReturnType<typeof getUrlByShortCode>>,
	TError = ErrorType<unknown>,
>(
	shortCode: string,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getUrlByShortCode>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getUrlByShortCode>>,
					TError,
					Awaited<ReturnType<typeof getUrlByShortCode>>
				>,
				"initialData"
			>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetUrlByShortCode<
	TData = Awaited<ReturnType<typeof getUrlByShortCode>>,
	TError = ErrorType<unknown>,
>(
	shortCode: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getUrlByShortCode>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getUrlByShortCode>>,
					TError,
					Awaited<ReturnType<typeof getUrlByShortCode>>
				>,
				"initialData"
			>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetUrlByShortCode<
	TData = Awaited<ReturnType<typeof getUrlByShortCode>>,
	TError = ErrorType<unknown>,
>(
	shortCode: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getUrlByShortCode>>,
				TError,
				TData
			>
		>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>
}

export function useGetUrlByShortCode<
	TData = Awaited<ReturnType<typeof getUrlByShortCode>>,
	TError = ErrorType<unknown>,
>(
	shortCode: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getUrlByShortCode>>,
				TError,
				TData
			>
		>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>
} {
	const queryOptions = getGetUrlByShortCodeQueryOptions(shortCode, options)

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> }

	query.queryKey = queryOptions.queryKey

	return query
}

export const deleteUrlByShortCode = (
	shortCode: string,
	options?: SecondParameter<typeof customInstance>,
) => {
	return customInstance<void>(
		{ url: `/api/urls/${shortCode}`, method: "DELETE" },
		options,
	)
}

export const getDeleteUrlByShortCodeMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteUrlByShortCode>>,
		TError,
		{ shortCode: string },
		TContext
	>
	request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteUrlByShortCode>>,
	TError,
	{ shortCode: string },
	TContext
> => {
	const mutationKey = ["deleteUrlByShortCode"]
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined }

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteUrlByShortCode>>,
		{ shortCode: string }
	> = (props) => {
		const { shortCode } = props ?? {}

		return deleteUrlByShortCode(shortCode, requestOptions)
	}

	return { mutationFn, ...mutationOptions }
}

export type DeleteUrlByShortCodeMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteUrlByShortCode>>
>

export type DeleteUrlByShortCodeMutationError = ErrorType<unknown>

export const useDeleteUrlByShortCode = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof deleteUrlByShortCode>>,
			TError,
			{ shortCode: string },
			TContext
		>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof deleteUrlByShortCode>>,
	TError,
	{ shortCode: string },
	TContext
> => {
	const mutationOptions = getDeleteUrlByShortCodeMutationOptions(options)

	return useMutation(mutationOptions, queryClient)
}
export const redirectToUrl = (
	shortCode: string,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<void>(
		{ url: `/api/urls/r/${shortCode}`, method: "GET", signal },
		options,
	)
}

export const getRedirectToUrlQueryKey = (shortCode: string) => {
	return [`/api/urls/r/${shortCode}`] as const
}

export const getRedirectToUrlQueryOptions = <
	TData = Awaited<ReturnType<typeof redirectToUrl>>,
	TError = ErrorType<unknown>,
>(
	shortCode: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof redirectToUrl>>, TError, TData>
		>
		request?: SecondParameter<typeof customInstance>
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {}

	const queryKey = queryOptions?.queryKey ?? getRedirectToUrlQueryKey(shortCode)

	const queryFn: QueryFunction<Awaited<ReturnType<typeof redirectToUrl>>> = ({
		signal,
	}) => redirectToUrl(shortCode, requestOptions, signal)

	return {
		queryKey,
		queryFn,
		enabled: !!shortCode,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof redirectToUrl>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type RedirectToUrlQueryResult = NonNullable<
	Awaited<ReturnType<typeof redirectToUrl>>
>
export type RedirectToUrlQueryError = ErrorType<unknown>

export function useRedirectToUrl<
	TData = Awaited<ReturnType<typeof redirectToUrl>>,
	TError = ErrorType<unknown>,
>(
	shortCode: string,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof redirectToUrl>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof redirectToUrl>>,
					TError,
					Awaited<ReturnType<typeof redirectToUrl>>
				>,
				"initialData"
			>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>
}
export function useRedirectToUrl<
	TData = Awaited<ReturnType<typeof redirectToUrl>>,
	TError = ErrorType<unknown>,
>(
	shortCode: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof redirectToUrl>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof redirectToUrl>>,
					TError,
					Awaited<ReturnType<typeof redirectToUrl>>
				>,
				"initialData"
			>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>
}
export function useRedirectToUrl<
	TData = Awaited<ReturnType<typeof redirectToUrl>>,
	TError = ErrorType<unknown>,
>(
	shortCode: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof redirectToUrl>>, TError, TData>
		>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>
}

export function useRedirectToUrl<
	TData = Awaited<ReturnType<typeof redirectToUrl>>,
	TError = ErrorType<unknown>,
>(
	shortCode: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof redirectToUrl>>, TError, TData>
		>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>
} {
	const queryOptions = getRedirectToUrlQueryOptions(shortCode, options)

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> }

	query.queryKey = queryOptions.queryKey

	return query
}
