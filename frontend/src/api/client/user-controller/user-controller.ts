/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * URL Shortener API
 * RESTful API for URL shortening service. Provides endpoints for URL shortening, redirection, user management, and analytics.
 * OpenAPI spec version: 1.0.0
 */
import { useMutation } from "@tanstack/react-query"
import type {
	MutationFunction,
	QueryClient,
	UseMutationOptions,
	UseMutationResult,
} from "@tanstack/react-query"

import type { ProfileUpdateRequest, UserResponseDTO } from "../../schemas"

import { customInstance } from ".././mutator/customAxiosInstance"
import type { ErrorType, BodyType } from ".././mutator/customAxiosInstance"

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

export const updateProfile = (
	profileUpdateRequest: BodyType<ProfileUpdateRequest>,
	options?: SecondParameter<typeof customInstance>,
) => {
	return customInstance<UserResponseDTO>(
		{
			url: `/api/users/profile`,
			method: "PUT",
			headers: { "Content-Type": "application/json" },
			data: profileUpdateRequest,
		},
		options,
	)
}

export const getUpdateProfileMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateProfile>>,
		TError,
		{ data: BodyType<ProfileUpdateRequest> },
		TContext
	>
	request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
	Awaited<ReturnType<typeof updateProfile>>,
	TError,
	{ data: BodyType<ProfileUpdateRequest> },
	TContext
> => {
	const mutationKey = ["updateProfile"]
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined }

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof updateProfile>>,
		{ data: BodyType<ProfileUpdateRequest> }
	> = (props) => {
		const { data } = props ?? {}

		return updateProfile(data, requestOptions)
	}

	return { mutationFn, ...mutationOptions }
}

export type UpdateProfileMutationResult = NonNullable<
	Awaited<ReturnType<typeof updateProfile>>
>
export type UpdateProfileMutationBody = BodyType<ProfileUpdateRequest>
export type UpdateProfileMutationError = ErrorType<unknown>

export const useUpdateProfile = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof updateProfile>>,
			TError,
			{ data: BodyType<ProfileUpdateRequest> },
			TContext
		>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof updateProfile>>,
	TError,
	{ data: BodyType<ProfileUpdateRequest> },
	TContext
> => {
	const mutationOptions = getUpdateProfileMutationOptions(options)

	return useMutation(mutationOptions, queryClient)
}
export const deleteAccount = (
	options?: SecondParameter<typeof customInstance>,
) => {
	return customInstance<void>(
		{ url: `/api/users/me`, method: "DELETE" },
		options,
	)
}

export const getDeleteAccountMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteAccount>>,
		TError,
		void,
		TContext
	>
	request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteAccount>>,
	TError,
	void,
	TContext
> => {
	const mutationKey = ["deleteAccount"]
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined }

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteAccount>>,
		void
	> = () => {
		return deleteAccount(requestOptions)
	}

	return { mutationFn, ...mutationOptions }
}

export type DeleteAccountMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteAccount>>
>

export type DeleteAccountMutationError = ErrorType<unknown>

export const useDeleteAccount = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof deleteAccount>>,
			TError,
			void,
			TContext
		>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof deleteAccount>>,
	TError,
	void,
	TContext
> => {
	const mutationOptions = getDeleteAccountMutationOptions(options)

	return useMutation(mutationOptions, queryClient)
}
