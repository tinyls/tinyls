/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * URL Shortener API
 * RESTful API for URL shortening service. Provides endpoints for URL shortening, redirection, user management, and analytics.
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query"
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query"

import type {
	AuthenticateUser200,
	LoginRequest,
	Oauth2Success200,
	Oauth2SuccessParams,
	PasswordUpdateDTO,
	RegisterRequest,
	RegisterUser200,
	UserResponseDTO,
} from "../../schemas"

import { customInstance } from ".././mutator/customAxiosInstance"
import type { ErrorType, BodyType } from ".././mutator/customAxiosInstance"

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

export const updatePassword = (
	passwordUpdateDTO: BodyType<PasswordUpdateDTO>,
	options?: SecondParameter<typeof customInstance>,
) => {
	return customInstance<UserResponseDTO>(
		{
			url: `/api/auth/password`,
			method: "PUT",
			headers: { "Content-Type": "application/json" },
			data: passwordUpdateDTO,
		},
		options,
	)
}

export const getUpdatePasswordMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updatePassword>>,
		TError,
		{ data: BodyType<PasswordUpdateDTO> },
		TContext
	>
	request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
	Awaited<ReturnType<typeof updatePassword>>,
	TError,
	{ data: BodyType<PasswordUpdateDTO> },
	TContext
> => {
	const mutationKey = ["updatePassword"]
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined }

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof updatePassword>>,
		{ data: BodyType<PasswordUpdateDTO> }
	> = (props) => {
		const { data } = props ?? {}

		return updatePassword(data, requestOptions)
	}

	return { mutationFn, ...mutationOptions }
}

export type UpdatePasswordMutationResult = NonNullable<
	Awaited<ReturnType<typeof updatePassword>>
>
export type UpdatePasswordMutationBody = BodyType<PasswordUpdateDTO>
export type UpdatePasswordMutationError = ErrorType<unknown>

export const useUpdatePassword = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof updatePassword>>,
			TError,
			{ data: BodyType<PasswordUpdateDTO> },
			TContext
		>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof updatePassword>>,
	TError,
	{ data: BodyType<PasswordUpdateDTO> },
	TContext
> => {
	const mutationOptions = getUpdatePasswordMutationOptions(options)

	return useMutation(mutationOptions, queryClient)
}
export const registerUser = (
	registerRequest: BodyType<RegisterRequest>,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<RegisterUser200>(
		{
			url: `/api/auth/register`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: registerRequest,
			signal,
		},
		options,
	)
}

export const getRegisterUserMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof registerUser>>,
		TError,
		{ data: BodyType<RegisterRequest> },
		TContext
	>
	request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
	Awaited<ReturnType<typeof registerUser>>,
	TError,
	{ data: BodyType<RegisterRequest> },
	TContext
> => {
	const mutationKey = ["registerUser"]
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined }

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof registerUser>>,
		{ data: BodyType<RegisterRequest> }
	> = (props) => {
		const { data } = props ?? {}

		return registerUser(data, requestOptions)
	}

	return { mutationFn, ...mutationOptions }
}

export type RegisterUserMutationResult = NonNullable<
	Awaited<ReturnType<typeof registerUser>>
>
export type RegisterUserMutationBody = BodyType<RegisterRequest>
export type RegisterUserMutationError = ErrorType<unknown>

export const useRegisterUser = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof registerUser>>,
			TError,
			{ data: BodyType<RegisterRequest> },
			TContext
		>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof registerUser>>,
	TError,
	{ data: BodyType<RegisterRequest> },
	TContext
> => {
	const mutationOptions = getRegisterUserMutationOptions(options)

	return useMutation(mutationOptions, queryClient)
}
export const authenticateUser = (
	loginRequest: BodyType<LoginRequest>,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<AuthenticateUser200>(
		{
			url: `/api/auth/login`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: loginRequest,
			signal,
		},
		options,
	)
}

export const getAuthenticateUserMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof authenticateUser>>,
		TError,
		{ data: BodyType<LoginRequest> },
		TContext
	>
	request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
	Awaited<ReturnType<typeof authenticateUser>>,
	TError,
	{ data: BodyType<LoginRequest> },
	TContext
> => {
	const mutationKey = ["authenticateUser"]
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined }

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof authenticateUser>>,
		{ data: BodyType<LoginRequest> }
	> = (props) => {
		const { data } = props ?? {}

		return authenticateUser(data, requestOptions)
	}

	return { mutationFn, ...mutationOptions }
}

export type AuthenticateUserMutationResult = NonNullable<
	Awaited<ReturnType<typeof authenticateUser>>
>
export type AuthenticateUserMutationBody = BodyType<LoginRequest>
export type AuthenticateUserMutationError = ErrorType<unknown>

export const useAuthenticateUser = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof authenticateUser>>,
			TError,
			{ data: BodyType<LoginRequest> },
			TContext
		>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof authenticateUser>>,
	TError,
	{ data: BodyType<LoginRequest> },
	TContext
> => {
	const mutationOptions = getAuthenticateUserMutationOptions(options)

	return useMutation(mutationOptions, queryClient)
}
export const oauth2Success = (
	params: Oauth2SuccessParams,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<Oauth2Success200>(
		{ url: `/api/auth/oauth2/success`, method: "GET", params, signal },
		options,
	)
}

export const getOauth2SuccessQueryKey = (params: Oauth2SuccessParams) => {
	return [`/api/auth/oauth2/success`, ...(params ? [params] : [])] as const
}

export const getOauth2SuccessQueryOptions = <
	TData = Awaited<ReturnType<typeof oauth2Success>>,
	TError = ErrorType<unknown>,
>(
	params: Oauth2SuccessParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof oauth2Success>>, TError, TData>
		>
		request?: SecondParameter<typeof customInstance>
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {}

	const queryKey = queryOptions?.queryKey ?? getOauth2SuccessQueryKey(params)

	const queryFn: QueryFunction<Awaited<ReturnType<typeof oauth2Success>>> = ({
		signal,
	}) => oauth2Success(params, requestOptions, signal)

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof oauth2Success>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type Oauth2SuccessQueryResult = NonNullable<
	Awaited<ReturnType<typeof oauth2Success>>
>
export type Oauth2SuccessQueryError = ErrorType<unknown>

export function useOauth2Success<
	TData = Awaited<ReturnType<typeof oauth2Success>>,
	TError = ErrorType<unknown>,
>(
	params: Oauth2SuccessParams,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof oauth2Success>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof oauth2Success>>,
					TError,
					Awaited<ReturnType<typeof oauth2Success>>
				>,
				"initialData"
			>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>
}
export function useOauth2Success<
	TData = Awaited<ReturnType<typeof oauth2Success>>,
	TError = ErrorType<unknown>,
>(
	params: Oauth2SuccessParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof oauth2Success>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof oauth2Success>>,
					TError,
					Awaited<ReturnType<typeof oauth2Success>>
				>,
				"initialData"
			>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>
}
export function useOauth2Success<
	TData = Awaited<ReturnType<typeof oauth2Success>>,
	TError = ErrorType<unknown>,
>(
	params: Oauth2SuccessParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof oauth2Success>>, TError, TData>
		>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>
}

export function useOauth2Success<
	TData = Awaited<ReturnType<typeof oauth2Success>>,
	TError = ErrorType<unknown>,
>(
	params: Oauth2SuccessParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof oauth2Success>>, TError, TData>
		>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>
} {
	const queryOptions = getOauth2SuccessQueryOptions(params, options)

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> }

	query.queryKey = queryOptions.queryKey

	return query
}

export const getCurrentUser = (
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<UserResponseDTO>(
		{ url: `/api/auth/me`, method: "GET", signal },
		options,
	)
}

export const getGetCurrentUserQueryKey = () => {
	return [`/api/auth/me`] as const
}

export const getGetCurrentUserQueryOptions = <
	TData = Awaited<ReturnType<typeof getCurrentUser>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>
	>
	request?: SecondParameter<typeof customInstance>
}) => {
	const { query: queryOptions, request: requestOptions } = options ?? {}

	const queryKey = queryOptions?.queryKey ?? getGetCurrentUserQueryKey()

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getCurrentUser>>> = ({
		signal,
	}) => getCurrentUser(requestOptions, signal)

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getCurrentUser>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCurrentUserQueryResult = NonNullable<
	Awaited<ReturnType<typeof getCurrentUser>>
>
export type GetCurrentUserQueryError = ErrorType<unknown>

export function useGetCurrentUser<
	TData = Awaited<ReturnType<typeof getCurrentUser>>,
	TError = ErrorType<unknown>,
>(
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getCurrentUser>>,
					TError,
					Awaited<ReturnType<typeof getCurrentUser>>
				>,
				"initialData"
			>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetCurrentUser<
	TData = Awaited<ReturnType<typeof getCurrentUser>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getCurrentUser>>,
					TError,
					Awaited<ReturnType<typeof getCurrentUser>>
				>,
				"initialData"
			>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetCurrentUser<
	TData = Awaited<ReturnType<typeof getCurrentUser>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>
		>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>
}

export function useGetCurrentUser<
	TData = Awaited<ReturnType<typeof getCurrentUser>>,
	TError = ErrorType<unknown>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>
		>
		request?: SecondParameter<typeof customInstance>
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>
} {
	const queryOptions = getGetCurrentUserQueryOptions(options)

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> }

	query.queryKey = queryOptions.queryKey

	return query
}
