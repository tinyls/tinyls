http:
  middlewares:
    dashboard-auth:
      basicAuth:
        realm: "Traefik Dashboard"
        removeHeader: true
        usersFile: "/etc/traefik/usersfile.txt"

    # Limit each client IP to 100 requests/second, with a burst of 50
    global-rate-limit:
      rateLimit:
        average: 100 # sustained rate per second
        burst: 50 # maximum spike

    # Redirect plain HTTP → HTTPS
    https-redirect:
      redirectScheme:
        scheme: https
        permanent: true

    # Rewrite single-segment shortcodes into backend API path
    rewrite-shortcode:
      replacePathRegex:
        regex: "^/([A-Za-z0-9_-]+)$"
        replacement: "/api/urls/r/$1"
    
    shortcode-frontend-fallback:
      errors:
        status:
          - "404"
        service: tinyls-staging-frontend
        # serve the SPA entrypoint; your React app will see the original path
        query: "/"

  routers:
    # Traefik Dashboard configuration
    dashboard:
      rule: Host(`traefik.staging.tinyls.com`)
      service: api@internal
      entryPoints:
        - websecure
      middlewares:
        - dashboard-auth
      tls:
        certResolver: letsencrypt

    # Grafana UI configuration
    grafana:
      rule: Host(`grafana.staging.tinyls.com`)
      service: grafana
      entryPoints:
        - websecure
      tls:
        certResolver: letsencrypt

    # Adminer HTTP -> HTTP configuration
    tinyls-staging-adminer-http:
      rule: Host(`adminer.staging.tinyls.com`)
      service: tinyls-staging-adminer
      entryPoints:
        - web
      middlewares:
        - https-redirect
        - global-rate-limit

    tinyls-staging-adminer-https:
      rule: Host(`adminer.staging.tinyls.com`)
      service: tinyls-staging-adminer
      entryPoints:
        - websecure
      middlewares:
        - global-rate-limit
      tls:
        certResolver: letsencrypt

    # Backend API (HTTP -> HTTPS) configuration
    tinyls-staging-backend-http:
      rule: Host(`api.staging.tinyls.com`) && (
        PathPrefix(`/api`) ||
        PathPrefix(`/api-docs`) ||
        PathPrefix(`/swagger-ui`)
        )
      service: tinyls-staging-backend
      entryPoints:
        - web
      middlewares:
        - https-redirect
        - global-rate-limit
      priority: 30

    tinyls-staging-backend-https:
      rule: Host(`api.staging.tinyls.com`) &&(
        PathPrefix(`/api`) ||
        PathPrefix(`/api-docs`) ||
        PathPrefix(`/swagger-ui`)
        )
      service: tinyls-staging-backend
      entryPoints:
        - websecure
      middlewares:
        - global-rate-limit
      tls:
        certResolver: letsencrypt
      priority: 30

    # Backend Auth router for OAuth
    tinyls-staging-backend-auth-http:
      rule: Host(`api.staging.tinyls.com`) &&
        (
        PathPrefix(`/oauth2/authorize`) ||
        PathPrefix(`/login/oauth2/code`)
        )
      service: tinyls-staging-backend
      entryPoints:
        - web
      middlewares:
        - global-rate-limit
        - https-redirect
      priority: 25

    tinyls-staging-backend-auth-https:
      rule: Host(`api.staging.tinyls.com`) &&
        (
        PathPrefix(`/oauth2/authorize`) ||
        PathPrefix(`/login/oauth2/code`)
        )
      service: tinyls-staging-backend
      entryPoints:
        - websecure
      middlewares:
        - global-rate-limit
      tls:
        certResolver: letsencrypt
      priority: 25

    tinyls-staging-callback-http:
      rule: Host(`staging.tinyls.com`) && (PathPrefix(`/oauth2-callback`) || PathPrefix(`/login`) || PathPrefix(`/register`))
      service: tinyls-staging-frontend
      entryPoints:
        - web
      middlewares:
        - https-redirect
        - global-rate-limit
      priority: 25

    tinyls-staging-callback-https:
      rule: Host(`staging.tinyls.com`) && (PathPrefix(`/oauth2-callback`) || PathPrefix(`/login`) || PathPrefix(`/register`))
      service: tinyls-staging-frontend
      entryPoints:
        - websecure
      middlewares:
        - global-rate-limit
      tls:
        certResolver: letsencrypt
      priority: 25

    # Shortcode redirect (HTTP -> HTTPS) configuration
    tinyls-staging-shortcode-http:
      rule: Host(`staging.tinyls.com`) && PathRegexp(`^/[A-Za-z0-9_-]+$`)
      service: tinyls-staging-backend
      entryPoints:
        - web
      middlewares:
        - https-redirect
        - global-rate-limit
      priority: 20

    tinyls-staging-shortcode-https:
      rule: Host(`staging.tinyls.com`) && PathRegexp(`^/[A-Za-z0-9_-]+$`)
      service: tinyls-staging-backend
      entryPoints:
        - websecure
      middlewares:
        - rewrite-shortcode # turn /abc → /api/r/abc
        - global-rate-limit
        - shortcode-frontend-fallback # any 404 -> frontend
      tls:
        certResolver: letsencrypt
      priority: 20

    # Frontend SPA (HTTP -> HTTPS) configuration
    tinyls-staging-frontend-http:
      rule: Host(`staging.tinyls.com`)
      service: tinyls-staging-frontend
      entryPoints:
        - web
      middlewares:
        - https-redirect
        - global-rate-limit
      priority: 10

    # Frontend HTTPS configuration
    tinyls-staging-frontend-https:
      rule: Host(`staging.tinyls.com`)
      service: tinyls-staging-frontend
      entryPoints:
        - websecure
      middlewares:
        - global-rate-limit
      tls:
        certResolver: letsencrypt
      priority: 10

  services:
    prometheus:
      loadBalancer:
        servers:
          - url: "http://prometheus:9090"

    grafana:
      loadBalancer:
        servers:
          - url: "http://grafana:3000"

    tinyls-staging-adminer:
      loadBalancer:
        servers:
          - url: "http://adminer:8080"

    tinyls-staging-backend:
      loadBalancer:
        servers:
          - url: "http://backend:8000"

    tinyls-staging-frontend:
      loadBalancer:
        servers:
          - url: "http://frontend:80"

    shortcode-redirect-service:
      loadBalancer:
        servers:
          - url: "http://backend:8000/api/urls/r/"
        passHostHeader: true
