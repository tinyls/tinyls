name: CI / CD - Staging

on:
  push:
    branches: [deployment/staging]
  workflow_dispatch: # Allow manual trigger

permissions:
  contents: read
  id-token: write # for AWS OIDC
  packages: write # to publish to GHCR
  actions: read # for checkout

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      TAG: staging
      DOCKER_IMAGE_BACKEND: ghcr.io/${{ github.repository_owner }}/tinyls-backend
      DOCKER_IMAGE_FRONTEND: ghcr.io/${{ github.repository_owner }}/tinyls-frontend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for better caching

      - name: Set up QEMU & Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.0
          buildkitd-flags: --debug

      - name: Configure AWS credentials via OIDC for build
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_STAGING }}
          aws-region: us-east-1
      
      - name: Fetch frontend VITE social URLs
        run: |
          for key in PERSONAL GITHUB LINKEDIN INSTAGRAM; do
            param="/dev/VITE_SOCIAL_${key}_URL"
            val=$(aws ssm get-parameter --name "$param" --with-decryption --query Parameter.Value --output text)
            echo "VITE_SOCIAL_${key}_URL=$val" >> "$GITHUB_ENV"
          done

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./url-shortener
          file: ./url-shortener/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE_BACKEND }}:${{ github.sha }}
            ${{ env.DOCKER_IMAGE_BACKEND }}:${{ env.TAG }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE_BACKEND }}-cache:${{ env.TAG }}
          cache-to: type=registry,ref=${{ env.DOCKER_IMAGE_BACKEND }}-cache:${{ env.TAG }},mode=max :contentReference[oaicite:4]{index=4}
          platforms: linux/amd64,linux/arm64

      - name: Build & push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE_FRONTEND }}:${{ github.sha }}
            ${{ env.DOCKER_IMAGE_FRONTEND }}:${{ env.TAG }}
          build-args: |
            VITE_API_URL=https://api.${{ secrets.STAGING_DOMAIN }}
            VITE_SOCIAL_PERSONAL_URL=${{ env.VITE_SOCIAL_PERSONAL_URL }}
            VITE_SOCIAL_GITHUB_URL=${{ env.VITE_SOCIAL_GITHUB_URL }}
            VITE_SOCIAL_LINKEDIN_URL=${{ env.VITE_SOCIAL_LINKEDIN_URL }}
            VITE_SOCIAL_INSTAGRAM_URL=${{ env.VITE_SOCIAL_INSTAGRAM_URL }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE_FRONTEND }}-cache:${{ env.TAG }}
          cache-to: type=registry,ref=${{ env.DOCKER_IMAGE_FRONTEND }}-cache:${{ env.TAG }},mode=max
          platforms: linux/amd64

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: staging
    if: github.event_name == 'push'
    env:
      TAG: staging
      DOCKER_IMAGE_BACKEND: ghcr.io/${{ github.repository_owner }}/tinyls-backend
      DOCKER_IMAGE_FRONTEND: ghcr.io/${{ github.repository_owner }}/tinyls-frontend

    steps:
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4.2.1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_STAGING }}
          aws-region: us-east-1

      - name: Fetch all staging secrets and write .env.staging
        run: |
          # Fetch parameters under /dev/
          aws ssm get-parameters-by-path \
            --path "/dev/" \
            --recursive \
            --with-decryption \
            --query 'Parameters[].{Name:Name,Value:Value}' \
            --output json > ssm.json

          TRAEFIK_CREDS=$(aws ssm get-parameter \
            --name "/dev/TRAEFIK_CREDENTIALS" \
            --with-decryption \
            --output text \
            --query Parameter.Value)

          # Convert to KEY=VALUE lines
          # Convert JSON to KEY=VALUE lines
          jq -r '.[] | (.Name | sub("^/dev/"; "")) as $k | "\($k)=\(.Value)"' ssm.json \
            > .env.staging
          jq -r '.[] | (.Name | sub("^/dev/"; "")) as $k | "\($k)=\(.Value)"' ssm.json \
            > .env
          # Add TAG and image vars
          echo "TAG=${{ env.TAG }}" >> .env
          echo "DOCKER_IMAGE_BACKEND=${{ env.DOCKER_IMAGE_BACKEND }}" >> .env
          echo "DOCKER_IMAGE_FRONTEND=${{ env.DOCKER_IMAGE_FRONTEND }}" >> .env
          echo "TAG=${{ env.TAG }}" >> .env.staging
          echo "DOCKER_IMAGE_BACKEND=${{ env.DOCKER_IMAGE_BACKEND }}" >> .env.staging
          echo "DOCKER_IMAGE_FRONTEND=${{ env.DOCKER_IMAGE_FRONTEND }}" >> .env.staging
          echo $TRAEFIK_CREDS >> usersfile.txt

      - name: Ensure remote .env.staging is absent
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.LIGHTSAIL_HOST }}
          username: ${{ secrets.LIGHTSAIL_USER }}
          key: ${{ secrets.LIGHTSAIL_SSH_KEY }}
          script: |
            rm -rf /opt/tinyls/.env.staging
            rm -rf /opt/tinyls/.env

      - name: Copy .env.staging to server
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.LIGHTSAIL_HOST }}
          username: ${{ secrets.LIGHTSAIL_USER }}
          key: ${{ secrets.LIGHTSAIL_SSH_KEY }}
          source: ".env.staging"
          target: "/opt/tinyls/."

      - name: Copy .env to server
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.LIGHTSAIL_HOST }}
          username: ${{ secrets.LIGHTSAIL_USER }}
          key: ${{ secrets.LIGHTSAIL_SSH_KEY }}
          source: ".env"
          target: "/opt/tinyls/."

      - name: Copy .env to server
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.LIGHTSAIL_HOST }}
          username: ${{ secrets.LIGHTSAIL_USER }}
          key: ${{ secrets.LIGHTSAIL_SSH_KEY }}
          source: "usersfile.txt"
          target: "infra/traefik/."

      - name: Deploy to staging server
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.LIGHTSAIL_HOST }}
          username: ${{ secrets.LIGHTSAIL_USER }}
          key: ${{ secrets.LIGHTSAIL_SSH_KEY }}
          # assuming the server has already been bootstrapped once
          script: |
            export TAG=staging
            cd /opt/tinyls
            sudo chmod 600 infra/traefik/acme.json
            sudo chmod 600 infra/traefik/usersfile.txt
            ./scripts/deploy.sh
