services:
  db:
    image: postgres:17
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_SERVER=localhost

    networks:
      - default

  adminer:
    image: adminer
    depends_on:
      - db
    environment:
      - ADMINER_DESIGN=pepa-linha-dark
    networks:
      - default

  redis:
    image: redis:7-alpine
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      start_period: 10s
      retries: 5
    volumes:
      - app-redis-data:/data
    env_file:
      - .env
    networks:
      - default

  frontend:
    image: "${DOCKER_IMAGE_FRONTEND?Variable not set}:${TAG-latest}"
    restart: always
    build:
      context: ./frontend
      args:
        - VITE_API_URL=https://api.${DOMAIN?Variable not set}
        - NODE_ENV=development
    environment:
      - VITE_API_URL=https://api.${DOMAIN}
    networks:
      - default

  backend:
    image: "${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}"
    build:
      context: ./url-shortener
    restart: always
    depends_on:
      db:
        condition: service_healthy
        restart: true
      redis:
        condition: service_healthy
        restart: true
    env_file:
      - .env
    healthcheck:
      # test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      test: ["CMD", "curl", "-f", "http://localhost:8000/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    networks:
      - default

volumes:
  app-db-data:
  app-redis-data:

networks:
  default:
