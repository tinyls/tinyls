package com.tinyls.urlshortener.model;

import java.sql.Timestamp;

import com.tinyls.urlshortener.util.Base62;
import jakarta.persistence.*;
import org.hibernate.annotations.CreationTimestamp;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import com.tinyls.urlshortener.model.UrlStatus;

// TODO: check if you can remove the idx_url_shortcode

/**
 * Entity class representing a shortened URL in the system.
 * Maps to the 'urls' table in the database.
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
@Entity
@EntityListeners(Url.ShortCodeListener.class)
@Table(name = "urls", indexes = {
        @Index(name = "idx_url_shortcode", columnList = "shortCode", unique = true)
})
@SequenceGenerator(name = "url_seq", sequenceName = "urls_seq", allocationSize = 1, initialValue = 3844)
public class Url {

    /**
     * Unique identifier for the URL.
     * Auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "url_seq")
    private Long id;

    /**
     * The short code used to access the URL.
     * Must be unique and between 3-8 characters.
     */
    @Column(nullable = false, updatable = false, unique = true, length = 8)
    private String shortCode;

    /**
     * The original URL that is being shortened.
     * Stored as a string to preserve the exact URL format.
     */
    @Column(nullable = false, length = 2048)
    private String originalUrl;

    /**
     * The timestamp when the URL was created.
     * Automatically set when the URL is created.
     */
    @CreationTimestamp
    @Column(nullable = false, updatable = false)
    private Timestamp createdAt;

    /**
     * The number of times the URL has been accessed.
     * Initialized to 0 and incremented on each access.
     */
    @Builder.Default
    @Column(nullable = false)
    private Long clicks = 0L; // Default to 0

    /**
     * The user who created this URL.
     * Can be null for anonymous URLs.
     */
    @ManyToOne
    @JoinColumn(name = "user_id")
    private User user;

    /**
     * The status of the URL (ACTIVE, INACTIVE, etc.).
     * Defaults to ACTIVE.
     */
    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    @Builder.Default
    private UrlStatus status = UrlStatus.ACTIVE;

    public static class ShortCodeListener {
        /**
         * PrePersist is called *after* Hibernate has obtained the SEQUENCE value
         * but *before* the INSERT is executed.
         */
        @PrePersist
        public void onPrePersist(Url url) {
            // id is non-null here
            url.setShortCode(Base62.encode(url.getId()));
        }
    }
}